Welcome to the SmartJobs Web API!

The web API allows the user to query for Data Science Jobs, that have been found using the
Adzuna API and were stored using the QMiner data analytics platform. It contains only the
Job Posts containing the Data Science (predefined) skillset that were published in the EU.


///////////////////////////////////////////////////////////
// POSSIBLE ROUTES

The routes that are available:

// JOB INFO

POST /api/v1/jobs                           // POSTs the records to the bases
GET  /api/v1/jobs                           // GETs the jobs info (requires query)
GET  /api/v1/jobs/{id}                      // GETs the job with 'id' info

    Returns an (array of) object
    {
        id: number,
        timestamp: number,
        date: string,
        title: string,
        organization: string,
        description: string,
        location_coord: [ number, number ],
        location_city: string,
        location_country: string,
        skillset: [ string ]
    }


GET /api/v1/jobs/locations                  // GETs the jobs locations info (requires query)
GET /api/v1/jobs/{id}/locations             // GETs the jobs with 'id' locations info

    Returns an (array of) object
    {
        id: number,
        location_coord: [ number, number ],
        location_city: string,
        location_country: string
    }


GET /api/v1/jobs/skills                     // GETs the jobs skills info (required query)
GET /api/v1/jobs/{id}/skills                // GETs the jobs with 'id' skills info

    Returns an (array of) object
    {
        id: number,
        skillset: [ string ]
    }


GET /api/v1/jobs/locations_and_skills       // GETs the jobs location and skill info (requires query)
GET /api/v1/jobs/{id}/locations_and_skills  // GETs the job with 'id' location and skill info


    Returns an (array of) object
    {
        id: number,
        timestamp: number,
        location_coord: [ number, number ],
        location_city: string,
        location_country: string,
        skillset: [ string ]
    }


GET /api/v1/stats/count                     // GETs the number count of jobs, skills and locations

    Returns an object
    {
        numOfJobs: number,
        numOfLocations: number,
        numOfSkills: number
    }


GET /api/v1/stats/lists                     // GETs the whole arrays of skills, locations and countries with occurrences
GET /api/v1/stats/lists/{length}            // GETs the top 'length' arrays of skills, locations and countries with occurrences

    Returns an object
    {
        skills: {
            count: number,
            data: [
                { name: string, value: number }
            ]
        },
        locations: {
            count: number,
            data: [
                { name: string, value: number }
            ]
        },
        countries: {
            count: number,
            data: [
                { name: string, value: number }
            ]
        }
    }

// JOB CONCEPTS

POST /api/v1/render_jobs    // GETs html used in VideoLectures.NET

    Returns an string


///////////////////////////////////////////////////////////
// QUERY AND CALLING ROUTES

Here we present the query structure when calling the GET Routers
(needed only for those that are specified above).


// JOB INFO

There are two options:
1. specify the job ids
    Here we query for jobs using their internal id.
    Example:
        /api/v1/jobs?id=1,100,8000

        This will return the job info for jobs with ids 1, 100 and 8000

2. specify skills, countries and/or locations
    Here we query using the specified skills, countries and locations (cities).
    For skills it uses the AND operator and for locations and countries it
    uses the OR operator.
    Example:
        /api/v1/jobs?skills=javascript&skills=nodejs&locations=London&countries=Denmark

        This will query for jobs that require javascript AND nodejs and are
        located in London OR Denmark.


// JOB CONCEPTS

Here we specify the language and text we want to use for getting
the concepts and the suggested jobs

Example:
    /api/v1/concepts/text_job_similarity?lang=en&text=This is a machine learning course.

    This will return the jobs that contain at least one of the wikified concepts
    that are found for the text "This is a machine learning course."

///////////////////////////////////////////////////////////
// POSTING TO DATABASE

For posting to the database, use the JSON structure:
{
    "uri": "string",
    "url": "string",
    "title": "string",
    "date": "datetime",
    "dateFullStr": "string",
    "datePartStr": "string",
    "organization": "string",
    "description": "string",
    "inLocation": {
        "uri": "string",
        "coord": [
            "location longitude",
            "location latitude"
        ],
        "name": "string",
        "inCountry": {
            "uri": "string",
            "name": "string"
        }
    },
    "inCountry": {
        "uri": "string",
        "name": "string"
    },
    "foundIn": {
        "name": "string"
    },
    "requiredSkills": [
        {
            "uri": "string",
            "name": "string",
        }
    ],
    "wikified": [
        {
            "name": "string"
        }
    ]
}

///////////////////////////////////////////////////////////
// POSTING TO api/v1/render_jobs

An example of data that is posted

{
    lang: "en",
    title: "Doulion: Counting Triangles in Massive Graphs with a Coin",
    lecture_id: 9182,
    video_id: 9340,
    text: "Counting the number of triangles in a graph is a beautiful algorithmic problem which has gained importance over the last years due to its significant role in complex network analysis. Metrics frequently computed such as the clustering coefficient and the transitivity ratio involve the execution of a triangle counting algorithm. Furthermore, several interesting graph mining applications rely on computing the number of triangles in the graph of interest. In this paper, we focus on the problem of counting triangles in a graph. We propose a practical method, out of which all triangle counting algorithms can potentially benefit. Using a straight-forward triangle counting algorithm as a black box, we performed 166 experiments on real-world networks and on synthetic datasets as well, where we show that our method works with high accuracy, typically more than 99\% and gives significant speedups, resulting in even $\approx$ 130 times faster performance.",
    categories: "computer science>data mining>graph mining",
    lecture_slug: "kdd09_tsourakakis_dctmgwc"
}


///////////////////////////////////////////////////////////
// FUTURE WORK

Possible improvements:
 - Using joobles.org to crawl for more jobs published in the EU
 - Additional GET, POST routes


Copyright (c) 2016 Copyright Holder All Rights Reserved.
